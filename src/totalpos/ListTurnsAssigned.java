/*
 * ListTurnsAssigned.java
 *
 * Created on 04-ago-2011, 14:18:47
 */

package totalpos;

import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shidalgo
 */
public class ListTurnsAssigned extends JInternalFrame {

    private List<Assign> assigns;
    public boolean isOk = false;
    

    /** Creates new form ListTurnsAssigned */
    public ListTurnsAssigned() {
        initComponents();
        System.out.println("[" + Shared.now() + "] " + this.getClass().getName() + " " + Shared.lineNumber() +  " Constructor invocado");
        updateAll();
        isOk = true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newAssign = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        cancelAssignButton = new javax.swing.JButton();
        closeAssignButton = new javax.swing.JButton();
        reopenAssignButton = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Lista de Turnos Asignados");

        newAssign.setText("Nueva Asignación");
        newAssign.setFocusable(false);
        newAssign.setName("newAssign"); // NOI18N
        newAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAssignActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Turno", "Caja", "Fecha", "Abierto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setName("table"); // NOI18N
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.getTableHeader().setReorderingAllowed(false);
        table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tableFocusGained(evt);
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        table.getColumnModel().getColumn(3).setPreferredWidth(20);

        cancelAssignButton.setText("Cancelar Asignación");
        cancelAssignButton.setFocusable(false);
        cancelAssignButton.setName("cancelAssignButton"); // NOI18N
        cancelAssignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAssignButtonActionPerformed(evt);
            }
        });

        closeAssignButton.setText("Cerrar Asignación");
        closeAssignButton.setFocusable(false);
        closeAssignButton.setName("closeAssignButton"); // NOI18N
        closeAssignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeAssignButtonActionPerformed(evt);
            }
        });

        reopenAssignButton.setText("Re-Abrir Asignación");
        reopenAssignButton.setFocusable(false);
        reopenAssignButton.setName("reopenAssignButton"); // NOI18N
        reopenAssignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reopenAssignButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(newAssign, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(reopenAssignButton, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(closeAssignButton, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                            .addComponent(cancelAssignButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newAssign)
                    .addComponent(cancelAssignButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeAssignButton)
                    .addComponent(reopenAssignButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAssignActionPerformed
        AssignTurn at = new AssignTurn();
        getParent().add(at);
        at.setVisible(true);
        at.requestFocus();
    }//GEN-LAST:event_newAssignActionPerformed

    private void tableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableFocusGained
        updateAll();
    }//GEN-LAST:event_tableFocusGained

    private void tableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyPressed
        if ( evt.getKeyCode() == KeyEvent.VK_ESCAPE ){
            setVisible(false);
            dispose();
        }
    }//GEN-LAST:event_tableKeyPressed

    private void closeAssignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAssignButtonActionPerformed
        System.out.println("[" + Shared.now() + "] " + this.getClass().getName() + " " + Shared.lineNumber() +  " Cerrando asignacion de turno");
        if ( table.getSelectedRow() != -1 ){
            try {
                Object[] options = {"Si","No"};
                int n = JOptionPane.showOptionDialog(this,"¿Desea cerrar la asignación?",
                        Constants.appName,
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        options,
                        options[1]);

                if ( n == 0 ){
                    ConnectionDrivers.setAssignOpen(assigns.get(table.getSelectedRow()),false);
                    updateAll();
                    MessageBox msg = new MessageBox(MessageBox.SGN_SUCCESS, "Turno cerrado satisfactoriamente");
                    msg.show(this);
                }
            } catch (SQLException ex) {
                MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, "Problemas con la base de datos.", ex);
                msg.show(this);
                Shared.reload();
            } catch (Exception ex) {
                MessageBox msg = new MessageBox(MessageBox.SGN_CAUTION, ex.getMessage());
                msg.show(this);
            }
        }else{
            MessageBox msg = new MessageBox(MessageBox.SGN_CAUTION, "Debe seleccionar una asignación.");
            msg.show(null);
        }
    }//GEN-LAST:event_closeAssignButtonActionPerformed

    private void reopenAssignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reopenAssignButtonActionPerformed
        System.out.println("[" + Shared.now() + "] " + this.getClass().getName() + " " + Shared.lineNumber() +  " Reabriendo asignacion de turno");
        if ( table.getSelectedRow() != -1 ){
            try {
                Object[] options = {"Si","No"};
                int n = JOptionPane.showOptionDialog(this,"¿Desea re-abrir la asignación?",
                        Constants.appName,
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        options,
                        options[1]);

                if ( n == 0 ){
                    ConnectionDrivers.setAssignOpen(assigns.get(table.getSelectedRow()), true);
                    updateAll();
                    MessageBox msg = new MessageBox(MessageBox.SGN_SUCCESS, "Turno abierto satisfactoriamente");
                    msg.show(this);
                }
            } catch (SQLException ex) {
                MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, "Problemas con la base de datos.", ex);
                msg.show(this);
                Shared.reload();
            } catch (Exception ex) {
                MessageBox msg = new MessageBox(MessageBox.SGN_CAUTION, ex.getMessage());
                msg.show(this);
            }
        }else{
            MessageBox msg = new MessageBox(MessageBox.SGN_CAUTION, "Debe seleccionar una asignación.");
            msg.show(null);
        }
    }//GEN-LAST:event_reopenAssignButtonActionPerformed

    private void cancelAssignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAssignButtonActionPerformed
        System.out.println("[" + Shared.now() + "] " + this.getClass().getName() + " " + Shared.lineNumber() +  " Cancelando asignacion de turno");
        if ( table.getSelectedRow() != -1 ){
            try {
                boolean ans = ConnectionDrivers.wasAssignUsedToday(assigns.get(table.getSelectedRow()));
                if ( !ans ){

                    Object[] options = {"Si","No"};
                    int n = JOptionPane.showOptionDialog(this,"¿Desea cancelar la asignación?",
                            Constants.appName,
                            JOptionPane.YES_NO_CANCEL_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            options,
                            options[1]);

                    if ( n == 0 ){
                        ConnectionDrivers.deleteAssignToday(assigns.get(table.getSelectedRow()));
                        updateAll();
                        MessageBox msg = new MessageBox(MessageBox.SGN_SUCCESS, "Asignación eliminada satisfactoriamente.");
                        msg.show(this);
                    }
                }else{
                    MessageBox msg = new MessageBox(MessageBox.SGN_CAUTION, "Esta caja posee movimientos registrados, por lo tanto debe hacer Cierre de Caja para poder eliminar el turno.");
                    msg.show(this);
                }
            } catch (SQLException ex) {
                MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, "Problemas con la base de datos.", ex);
                msg.show(this);
                Shared.reload();
            }
        }else{
            MessageBox msg = new MessageBox(MessageBox.SGN_CAUTION, "Debe seleccionar una asignación.");
            msg.show(null);
        }
    }//GEN-LAST:event_cancelAssignButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelAssignButton;
    private javax.swing.JButton closeAssignButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newAssign;
    private javax.swing.JButton reopenAssignButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    private void updateAll() {
        System.out.println("[" + Shared.now() + "] " + this.getClass().getName() + " " + Shared.lineNumber() +  " Actualizar todo");
        try {
            assigns = ConnectionDrivers.listAssignsTurnPosToday();
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);
            for (Assign a : assigns) {
                Turn t = Shared.getTurn(ConnectionDrivers.listTurns(), a.getTurn());
                Object[] s = {"(" + t.getIdentificador() + ") " + Shared.sdfHour.format(t.getInicio()) + " -> "
                        + Shared.sdfHour.format(t.getFin()),a.getPos(),Shared.sdfDay.format(a.getDate()),a.isOpen()};
                model.addRow(s);
            }
        } catch (SQLException ex) {
            MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, "Problemas con la base de datos.", ex);
            msg.show(this);
            Shared.reload();
        }
        
    }

}
