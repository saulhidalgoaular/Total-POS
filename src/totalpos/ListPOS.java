/*
 * ListPOS.java
 *
 * Created on 03-ago-2011, 16:31:18
 */

package totalpos;

import java.sql.SQLException;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shidalgo
 */
public class ListPOS extends javax.swing.JInternalFrame {

    List<PointOfSale> poses;
    public boolean isOk = false;

    /** Creates new form ListPOS */
    public ListPOS() {
        initComponents();
        System.out.println("[" + Shared.now() + "] " + this.getClass().getName() + " " + Shared.lineNumber() +  " Constructor invocado");
        updateAll();
        isOk = true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newPOS = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        changePos = new javax.swing.JButton();
        flipEnable = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Cajas");
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        newPOS.setText("Nueva Caja");
        newPOS.setFocusable(false);
        newPOS.setName("newPOS"); // NOI18N
        newPOS.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                newPOSMouseMoved(evt);
            }
        });
        newPOS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPOSActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nro", "Ubicacion", "Impresora Fiscal", "Habilitada"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setName("table"); // NOI18N
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tableMouseMoved(evt);
            }
        });
        table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tableFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        table.getColumnModel().getColumn(3).setPreferredWidth(20);

        changePos.setText("Modificar Caja");
        changePos.setFocusable(false);
        changePos.setName("changePos"); // NOI18N
        changePos.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                changePosMouseMoved(evt);
            }
        });
        changePos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePosActionPerformed(evt);
            }
        });

        flipEnable.setText("Habilitar/Deshabilitar");
        flipEnable.setFocusable(false);
        flipEnable.setName("flipEnable"); // NOI18N
        flipEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipEnableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newPOS, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changePos, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(flipEnable, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newPOS)
                    .addComponent(changePos)
                    .addComponent(flipEnable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newPOSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPOSActionPerformed
        CreatePOS cp = new CreatePOS();
        this.getParent().add(cp);
        cp.setVisible(true);
        updateAll();
}//GEN-LAST:event_newPOSActionPerformed

    private void tableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableFocusGained
        updateAll();
    }//GEN-LAST:event_tableFocusGained

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        updateAll();
    }//GEN-LAST:event_formFocusGained

    private void changePosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePosActionPerformed
        Shared.getScreenSaver().actioned();
        if ( table.getSelectedRow() != -1 ){
            CreatePOS cp = new CreatePOS(poses.get(table.getSelectedRow()));
            this.getParent().add(cp);
            cp.setVisible(true);
        }else{
            MessageBox msg = new MessageBox(MessageBox.SGN_CAUTION, "Debe seleccionar la caja");
            msg.show(this);
        }
    }//GEN-LAST:event_changePosActionPerformed

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        Shared.getScreenSaver().actioned();
    }//GEN-LAST:event_formMouseMoved

    private void tableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseMoved
        Shared.getScreenSaver().actioned();
    }//GEN-LAST:event_tableMouseMoved

    private void changePosMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changePosMouseMoved
        Shared.getScreenSaver().actioned();
    }//GEN-LAST:event_changePosMouseMoved

    private void newPOSMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newPOSMouseMoved
        Shared.getScreenSaver().actioned();
    }//GEN-LAST:event_newPOSMouseMoved

    private void flipEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipEnableActionPerformed
        Shared.getScreenSaver().actioned();
        System.out.println("[" + Shared.now() + "] " + this.getClass().getName() + " " + Shared.lineNumber() +  " Flip enabled");
        if ( table.getSelectedRow() != -1 ){
            try {
                PointOfSale p = poses.get(table.getSelectedRow());
                ConnectionDrivers.flipEnabledPointOfSale(p);
                updateAll();
            } catch (SQLException ex) {
                MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, "Problemas con la base de datos.", ex);
                msg.show(this);
                this.dispose();
                Shared.reload();
            }
        }else{
            MessageBox msg = new MessageBox(MessageBox.SGN_CAUTION, "Debe seleccionar la caja");
            msg.show(this);
        }
    }//GEN-LAST:event_flipEnableActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changePos;
    private javax.swing.JButton flipEnable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newPOS;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    public void updateAll() {
        try {
            System.out.println("[" + Shared.now() + "] " + this.getClass().getName() + " " + Shared.lineNumber() +  " Actualizar todo");
            poses = ConnectionDrivers.listPOS();
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);
            for (PointOfSale pointOfSale : poses) {
                Object[] s = {pointOfSale.getId(),pointOfSale.getDescription(),pointOfSale.getPrinter(), pointOfSale.isEnabled()};
                model.addRow(s);
            }
                
        } catch (SQLException ex) {
            MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, "Problemas con la base de datos.", ex);
            msg.show(this);
            this.dispose();
            Shared.reload();
        }
    }

}
